{"version":3,"sources":["node_modules/browser-pack/_prelude.js","treesort.min.js","widgets/treesort/assets/js/treesort.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","$","Treesort","$el","_this","this","unbind","on","showPopup","value","_this2","btn","$popup","relatedTarget","$form","find","$tree","$indicator","css","height","preventDefault","show","request","data","subjects","getTreeData","success","done","trigger","document","error","console","log","oc","flashMsg","interval","class","text","responseJSON","result","complete","hide","popup","handler","each","push","fn","window","jQuery"],"mappings":"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","file":"treesort.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n+(function ($) {\n    'use strict';\n\n    var Treesort = (function () {\n\n        /**\r\n         * Set up event bindings\r\n         *\r\n         * @param {Object} $el\r\n         */\n\n        function Treesort($el) {\n            var _this = this;\n\n            _classCallCheck(this, Treesort);\n\n            this.$el = $el;\n            this.$el.unbind().on('click', function () {\n                return _this.showPopup();\n            });\n        }\n\n        /**\r\n         * Show the popup\r\n         *\r\n         * @return {void}\r\n         */\n\n        _createClass(Treesort, [{\n            key: 'showPopup',\n            value: function showPopup() {\n                var _this2 = this;\n\n                this.$el.on('show.oc.popup', function (btn) {\n                    var $popup = $(btn.relatedTarget),\n                        $form = $popup.find('form'),\n                        $tree = $popup.find('[data-control=\"tree\"]'),\n                        $indicator = $popup.find('[data-control=\"loading-indicator\"]');\n\n                    // Prevent the height of the modal from changing during re-ordering\n                    $tree.css('height', $tree.height());\n\n                    // Submit the request\n                    $form.on('submit', function (e) {\n                        e.preventDefault();\n\n                        $indicator.show();\n                        $form.request('treesort::onUpdateTree', {\n                            data: {\n                                subjects: _this2.getTreeData($tree)\n                            },\n                            success: function success(data) {\n                                this.success(data).done(function () {\n                                    $popup.trigger('close.oc.popup');\n                                    $(document).trigger('render');\n                                });\n                            },\n                            error: function error(data) {\n                                this.error(data).done(function () {\n\n                                    console.log(data);\n\n                                    $.oc.flashMsg({\n                                        interval: 5,\n                                        'class': 'error',\n                                        text: data.responseJSON.result\n                                    });\n                                });\n                            },\n                            complete: function complete() {\n                                $indicator.hide();\n                            }\n                        });\n                    });\n                });\n\n                // Trigger the popup\n                this.$el.popup({ handler: 'treesort::onShowPopup' });\n            }\n\n            /**\r\n             * Flatten the nested tree data\r\n             *\r\n             * @param  {Object} $tree\r\n             * @return {Array}\r\n             */\n        }, {\n            key: 'getTreeData',\n            value: function getTreeData($tree) {\n                var data = [];\n\n                $tree.find('li').each(function () {\n                    data.push($(this).data('id'));\n                });\n\n                return data;\n            }\n        }]);\n\n        return Treesort;\n    })();\n\n    //\n    // jQuery binding\n    //\n    $.fn.Treesort = function () {\n        return new Treesort(this);\n    };\n\n    $(document).on('render', function () {\n        $('[data-widget=\"treesort\"]').Treesort();\n    });\n})(window.jQuery);\n\n},{}]},{},[1])\n\n","+function ($) { 'use strict';\r\n\r\n    let Treesort = class {\r\n\r\n        /**\r\n         * Set up event bindings\r\n         *\r\n         * @param {Object} $el\r\n         */\r\n        constructor($el) {\r\n            this.$el = $el;\r\n            this.$el.unbind().on('click', () => this.showPopup());\r\n        }\r\n\r\n        /**\r\n         * Show the popup\r\n         *\r\n         * @return {void}\r\n         */\r\n        showPopup() {\r\n            this.$el.on('show.oc.popup', btn => {\r\n                let $popup = $(btn.relatedTarget),\r\n                    $form = $popup.find('form'),\r\n                    $tree = $popup.find('[data-control=\"tree\"]'),\r\n                    $indicator = $popup.find('[data-control=\"loading-indicator\"]');\r\n\r\n                // Prevent the height of the modal from changing during re-ordering\r\n                $tree.css('height', $tree.height());\r\n\r\n                // Submit the request\r\n                $form.on('submit', e => {\r\n                    e.preventDefault();\r\n\r\n                    $indicator.show();\r\n                    $form.request('treesort::onUpdateTree', {\r\n                        data: {\r\n                            subjects: this.getTreeData($tree),\r\n                        },\r\n                        success(data) {\r\n                            this.success(data).done(function() {\r\n                                $popup.trigger('close.oc.popup');\r\n                                $(document).trigger('render');\r\n                            });\r\n                        },\r\n                        error(data) {\r\n                            this.error(data).done(function() {\r\n\r\n                                console.log (data);\r\n\r\n                                $.oc.flashMsg({\r\n                                    interval: 5,\r\n                                    class: 'error',\r\n                                    text: data.responseJSON.result,\r\n                                });\r\n                            });\r\n                        },\r\n                        complete() {\r\n                            $indicator.hide();\r\n                        },\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Trigger the popup\r\n            this.$el.popup({ handler: 'treesort::onShowPopup' });\r\n        }\r\n\r\n        /**\r\n         * Flatten the nested tree data\r\n         *\r\n         * @param  {Object} $tree\r\n         * @return {Array}\r\n         */\r\n        getTreeData($tree) {\r\n            let data = [];\r\n\r\n            $tree.find('li').each(function() {\r\n                data.push( $(this).data('id') );\r\n            });\r\n\r\n            return data;\r\n        }\r\n    };\r\n\r\n    //\r\n    // jQuery binding\r\n    //\r\n    $.fn.Treesort = function() {\r\n        return new Treesort(this);\r\n    };\r\n\r\n    $(document).on('render', () =>  {\r\n        $('[data-widget=\"treesort\"]').Treesort();\r\n    });\r\n\r\n}(window.jQuery);\r\n"],"sourceRoot":"/source/"}